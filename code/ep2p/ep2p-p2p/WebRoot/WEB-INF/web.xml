<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>ep2p-p2p</display-name>
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 防止缓存溢出配置 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	<!-- 获取request上下文 -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<!--指定Spring配置文件和初始化监听器 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:config/spring-application.xml
		</param-value>
	</context-param>
	
	<!-- spring环境选择 production和Test -->
	<context-param>
		<param-name>spring.profiles.active</param-name>
		<param-value>production</param-value>
	</context-param>

	<!--在app server下多个服务时候用这个参数标识 <context-param> <param-name>webAppRootKey</param-name> 
		<param-value>adp-portal-web.root</param-value> </context-param> -->

	<session-config>
		<session-timeout>60</session-timeout>
		<cookie-config>
			<http-only>true</http-only>
		</cookie-config>
	</session-config>

	<!--使用Spring的编码转换过滤器，将请求信息的编码统一转换为UTF-8，以避免中文乱码问题 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- springmvc 加载 -->
	<servlet>
		<servlet-name>ep2p</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				classpath:/config/spring-mvc.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	
	  <servlet>
	   	<display-name>同步UC Server发出的操作指令</display-name>
	    <servlet-name>UC</servlet-name>
	    <servlet-class>com.yscf.core.ucenter.UC</servlet-class>
	    <load-on-startup>2</load-on-startup>
	  </servlet>
	  <servlet-mapping>
	    <servlet-name>UC</servlet-name>
	    <url-pattern>/api/uc.php</url-pattern>
	  </servlet-mapping>

	<!-- 使用.html后缀，一方面用户不能通过URL知道我们采用何种服务端技术， 同时，可骗过搜索引擎，增加被收录的概率 。真正的静态网页可以用.htm, 
		以避免被框架拦截 此处我采用shtml来屏蔽，因为属于内网架构， 不需要过多的收录事件,真正的静态页面采用*.html来实施 -->
	<servlet-mapping>
		<servlet-name>ep2p</servlet-name>
		<url-pattern>*.shtml</url-pattern>
	</servlet-mapping>
	
	<!-- google 验证码生成器 -->
	<servlet>
		<servlet-name>kaptcha</servlet-name>
		<servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>
		<init-param>
			<description>图片边框，合法值：yes , no</description>
			<param-name>kaptcha.border</param-name>
			<param-value>no</param-value>
		</init-param>
		<init-param>
			<description>边框颜色，合法值： r,g,b (and optional alpha) 或者 white,black,blue.</description>
			<param-name>kaptcha.border.color</param-name>
			<param-value>red</param-value>
		</init-param>
		<init-param>
			<description>边框厚度，合法值：>0</description>
			<param-name>kaptcha.border.thickness</param-name>
			<param-value>5</param-value>
		</init-param>
		<init-param>
			<description>图片宽</description>
			<param-name>kaptcha.image.width</param-name>
			<param-value>85</param-value>
		</init-param>
		<init-param>
			<description>图片高</description>
			<param-name>kaptcha.image.height</param-name>
			<param-value>35</param-value>
		</init-param>
		<init-param>
			<description>图片实现类</description>
			<param-name>kaptcha.producer.impl</param-name>
			<param-value>com.google.code.kaptcha.impl.DefaultKaptcha </param-value>
		</init-param>
		<init-param>
			<description>文本实现类</description>
			<param-name>kaptcha.textproducer.impl</param-name>
			<param-value>com.google.code.kaptcha.text.impl.DefaultTextCreator</param-value>
		</init-param>
		<init-param>
			<description>文本集合，验证码值从此集合中获取</description>
			<param-name>kaptcha.textproducer.char.string</param-name>
			<param-value>acdefkmnrstwxy134578AEFGHKMNPQRSWXY</param-value>
		</init-param>
		<init-param>
			<description>验证码长度</description>
			<param-name>kaptcha.textproducer.char.length</param-name>
			<param-value>4</param-value>
		</init-param>
		<init-param>
			<description>字体</description>
			<param-name>kaptcha.textproducer.font.names</param-name>
			<param-value>Arial, Courier</param-value>
		</init-param>
		<init-param>
			<description>字体大小</description>
			<param-name>kaptcha.textproducer.font.size</param-name>
			<param-value>23</param-value>
		</init-param>
		<init-param>
			<description>字体颜色，合法值： r,g,b  或者 white,black,blue.</description>
			<param-name>kaptcha.textproducer.font.color</param-name>
			<param-value>black</param-value>
		</init-param>
		<init-param>
			<description>文字间隔</description>
			<param-name>kaptcha.textproducer.char.space</param-name>
			<param-value>2</param-value>
		</init-param>
		<init-param>
			<description>干扰实现类</description>
			<param-name>kaptcha.noise.impl</param-name>
			<param-value>com.google.code.kaptcha.impl.NoNoise </param-value>
		</init-param>
		<init-param>
			<description>干扰颜色，合法值： r,g,b 或者 white,black,blue.</description>
			<param-name>kaptcha.noise.color</param-name>
			<param-value>blue</param-value>
		</init-param>
		<init-param>
			<description>图片样式： 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy</description>
			<param-name>kaptcha.obscurificator.impl</param-name>
			<param-value>com.google.code.kaptcha.impl.ShadowGimpy</param-value>
		</init-param>
		<init-param>
			<description>背景实现类</description>
			<param-name>kaptcha.background.impl</param-name>
			<param-value>com.google.code.kaptcha.impl.DefaultBackground</param-value>
		</init-param>
		<init-param>
			<description>背景颜色渐变，开始颜色</description>
			<param-name>kaptcha.background.clear.from</param-name>
			<param-value>167,167,167</param-value>
		</init-param>
		<init-param>
			<description>背景颜色渐变，结束颜色</description>
			<param-name>kaptcha.background.clear.to</param-name>
			<param-value>167,167,167</param-value>
		</init-param>
		<init-param>
			<description>文字渲染器</description>
			<param-name>kaptcha.word.impl</param-name>
			<param-value>com.google.code.kaptcha.text.impl.DefaultWordRenderer</param-value>
		</init-param> 
		<init-param>
			<description>session key</description>
			<param-name>kaptcha.session.key</param-name>
			<param-value>KAPTCHA_SESSION_KEY</param-value>
		</init-param>
		<init-param>
			<description>session date</description>
			<param-name>kaptcha.session.date</param-name>
			<param-value>KAPTCHA_SESSION_DATE</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>kaptcha</servlet-name>
		<url-pattern>/kaptcha.jpg</url-pattern>
	</servlet-mapping>
	
	<!-- 浏览器不支持put,delete等method,由该filter将xxx?_method=delete 或 xxx?_method=put 
		转换为标准的http delete、put 方法 -->
	<filter>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<servlet-name>ep2p</servlet-name>
	</filter-mapping>

	<!-- 使Druid可以监控webURl访问 -->
	<filter>
		<filter-name>druid</filter-name>
		<filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
		<init-param>
			<param-name>exclusions</param-name>
			<param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>druid</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 缓存、gzip压缩核心过滤器 -->
	<filter>
		<filter-name>ViewCacheFilter</filter-name>
		<filter-class>com.achievo.framework.cache.view.ViewCacheFilter</filter-class>
		<init-param>
			<param-name>cacheURLs</param-name>
			<!-- 配置你需要缓存的url -->
			<param-value>/index.jsp</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>ViewCacheFilter</filter-name>
		<url-pattern>*.shtml</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>ViewCacheFilter</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>


	<error-page>
		<error-code>401</error-code>
		<location>/error/401.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/error/403.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/error/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/error/500.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<location>/error/exception.jsp</location>
	</error-page>
</web-app>